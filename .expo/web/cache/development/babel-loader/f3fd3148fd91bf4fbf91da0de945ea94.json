{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport React from 'react';\nimport Animated, { Easing } from 'react-native-reanimated';\nimport { runInfinite } from \"./utils/animation/presets\";\nimport NeuView from \"./NeuView\";\nimport PropTypes from 'prop-types';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nvar NeuSpinner = function NeuSpinner(props) {\n  var Clock = Animated.Clock,\n      concat = Animated.concat;\n  var color = props.color,\n      _props$indicatorColor = props.indicatorColor,\n      indicatorColor = _props$indicatorColor === void 0 ? '#000' : _props$indicatorColor,\n      _props$duration = props.duration,\n      duration = _props$duration === void 0 ? 1000 : _props$duration,\n      _props$size = props.size,\n      size = _props$size === void 0 ? 50 : _props$size,\n      _props$easingType = props.easingType,\n      easingType = _props$easingType === void 0 ? Easing.linear : _props$easingType;\n  var rotation = runInfinite(new Clock(), 0, 360, duration, easingType);\n  var defaultSize = size < 50 ? 50 : size;\n  var innerSize = defaultSize - 15;\n  return _jsx(NeuView, {\n    color: color,\n    width: defaultSize,\n    height: defaultSize,\n    borderRadius: 1000,\n    inset: true,\n    children: _jsx(NeuView, {\n      color: color,\n      width: innerSize,\n      height: innerSize,\n      borderRadius: 1000,\n      children: _jsx(Animated.View, {\n        style: {\n          borderLeftColor: indicatorColor,\n          borderTopColor: indicatorColor,\n          borderBottomColor: indicatorColor,\n          borderWidth: 6,\n          borderRightColor: 'transparent',\n          transform: [{\n            rotate: concat(rotation, 'deg')\n          }],\n          borderRadius: 100,\n          width: defaultSize,\n          height: defaultSize\n        }\n      })\n    })\n  });\n};\n\nNeuSpinner.propTypes = _objectSpread({\n  color: PropTypes.string.isRequired,\n  indicatorColor: PropTypes.string.isRequired,\n  duration: PropTypes.number,\n  size: PropTypes.number.isRequired,\n  easingType: PropTypes.func\n}, NeuView.propTypes);\nexport default NeuSpinner;","map":{"version":3,"sources":["C:/Users/Jay Patel/Documents/Luminosity Lab/Bank Of The West/pocketpig/node_modules/react-native-neu-element/lib/NeuSpinner.js"],"names":["React","Animated","Easing","runInfinite","NeuView","PropTypes","NeuSpinner","props","Clock","concat","color","indicatorColor","duration","size","easingType","linear","rotation","defaultSize","innerSize","borderLeftColor","borderTopColor","borderBottomColor","borderWidth","borderRightColor","transform","rotate","borderRadius","width","height","propTypes","string","isRequired","number","func"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,IAAmBC,MAAnB,QAAiC,yBAAjC;AACA,SAASC,WAAT;AACA,OAAOC,OAAP;AACA,OAAOC,SAAP,MAAsB,YAAtB;;;AAEA,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAAAC,KAAK,EAAI;AAC1B,MAAQC,KAAR,GAA0BP,QAA1B,CAAQO,KAAR;AAAA,MAAeC,MAAf,GAA0BR,QAA1B,CAAeQ,MAAf;AAEA,MACEC,KADF,GAMIH,KANJ,CACEG,KADF;AAAA,8BAMIH,KANJ,CAEEI,cAFF;AAAA,MAEEA,cAFF,sCAEmB,MAFnB;AAAA,wBAMIJ,KANJ,CAGEK,QAHF;AAAA,MAGEA,QAHF,gCAGa,IAHb;AAAA,oBAMIL,KANJ,CAIEM,IAJF;AAAA,MAIEA,IAJF,4BAIS,EAJT;AAAA,0BAMIN,KANJ,CAKEO,UALF;AAAA,MAKEA,UALF,kCAKeZ,MAAM,CAACa,MALtB;AAQA,MAAMC,QAAQ,GAAGb,WAAW,CAAC,IAAIK,KAAJ,EAAD,EAAc,CAAd,EAAiB,GAAjB,EAAsBI,QAAtB,EAAgCE,UAAhC,CAA5B;AAEA,MAAMG,WAAW,GAAGJ,IAAI,GAAG,EAAP,GAAY,EAAZ,GAAiBA,IAArC;AACA,MAAMK,SAAS,GAAGD,WAAW,GAAG,EAAhC;AAEA,SACE,KAAC,OAAD;AACE,IAAA,KAAK,EAAEP,KADT;AAEE,IAAA,KAAK,EAAEO,WAFT;AAGE,IAAA,MAAM,EAAEA,WAHV;AAIE,IAAA,YAAY,EAAE,IAJhB;AAKE,IAAA,KAAK,MALP;AAAA,cAOE,KAAC,OAAD;AACE,MAAA,KAAK,EAAEP,KADT;AAEE,MAAA,KAAK,EAAEQ,SAFT;AAGE,MAAA,MAAM,EAAEA,SAHV;AAIE,MAAA,YAAY,EAAE,IAJhB;AAAA,gBAME,KAAC,QAAD,CAAU,IAAV;AACE,QAAA,KAAK,EAAE;AACLC,UAAAA,eAAe,EAAER,cADZ;AAELS,UAAAA,cAAc,EAAET,cAFX;AAGLU,UAAAA,iBAAiB,EAAEV,cAHd;AAILW,UAAAA,WAAW,EAAE,CAJR;AAKLC,UAAAA,gBAAgB,EAAE,aALb;AAMLC,UAAAA,SAAS,EAAE,CAAC;AAAEC,YAAAA,MAAM,EAAEhB,MAAM,CAACO,QAAD,EAAW,KAAX;AAAhB,WAAD,CANN;AAOLU,UAAAA,YAAY,EAAE,GAPT;AAQLC,UAAAA,KAAK,EAAEV,WARF;AASLW,UAAAA,MAAM,EAAEX;AATH;AADT;AANF;AAPF,IADF;AA8BD,CA9CD;;AAgDAX,UAAU,CAACuB,SAAX;AACEnB,EAAAA,KAAK,EAAEL,SAAS,CAACyB,MAAV,CAAiBC,UAD1B;AAEEpB,EAAAA,cAAc,EAAEN,SAAS,CAACyB,MAAV,CAAiBC,UAFnC;AAGEnB,EAAAA,QAAQ,EAAEP,SAAS,CAAC2B,MAHtB;AAIEnB,EAAAA,IAAI,EAAER,SAAS,CAAC2B,MAAV,CAAiBD,UAJzB;AAKEjB,EAAAA,UAAU,EAAET,SAAS,CAAC4B;AALxB,GAMK7B,OAAO,CAACyB,SANb;AASA,eAAevB,UAAf","sourcesContent":["import React from 'react';\nimport Animated, { Easing } from 'react-native-reanimated';\nimport { runInfinite } from './utils/animation/presets';\nimport NeuView from './NeuView';\nimport PropTypes from 'prop-types';\n\nconst NeuSpinner = props => {\n  const { Clock, concat } = Animated;\n\n  const {\n    color,\n    indicatorColor = '#000',\n    duration = 1000,\n    size = 50,\n    easingType = Easing.linear\n  } = props;\n\n  const rotation = runInfinite(new Clock(), 0, 360, duration, easingType);\n\n  const defaultSize = size < 50 ? 50 : size;\n  const innerSize = defaultSize - 15;\n\n  return (\n    <NeuView\n      color={color}\n      width={defaultSize}\n      height={defaultSize}\n      borderRadius={1000}\n      inset\n    >\n      <NeuView\n        color={color}\n        width={innerSize}\n        height={innerSize}\n        borderRadius={1000}\n      >\n        <Animated.View\n          style={{\n            borderLeftColor: indicatorColor,\n            borderTopColor: indicatorColor,\n            borderBottomColor: indicatorColor,\n            borderWidth: 6,\n            borderRightColor: 'transparent',\n            transform: [{ rotate: concat(rotation, 'deg') }],\n            borderRadius: 100,\n            width: defaultSize,\n            height: defaultSize\n          }}\n        />\n      </NeuView>\n    </NeuView>\n  );\n};\n\nNeuSpinner.propTypes = {\n  color: PropTypes.string.isRequired,\n  indicatorColor: PropTypes.string.isRequired,\n  duration: PropTypes.number,\n  size: PropTypes.number.isRequired,\n  easingType: PropTypes.func,\n  ...NeuView.propTypes\n};\n\nexport default NeuSpinner;\n"]},"metadata":{},"sourceType":"module"}