{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport React, { useState } from 'react';\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport NeuView from \"./NeuView\";\nimport PropTypes from 'prop-types';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nvar NeuButton = function NeuButton(props) {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      toggleEffect = _useState2[0],\n      setToggleEffect = _useState2[1];\n\n  var children = props.children,\n      isConvex = props.isConvex,\n      active = props.active,\n      noPressEffect = props.noPressEffect,\n      onPressIn = props.onPressIn,\n      onPressOut = props.onPressOut,\n      onPress = props.onPress,\n      onLongPress = props.onLongPress,\n      accessibilityRole = props.accessibilityRole,\n      accessibilityStates = props.accessibilityStates,\n      accessibilityLabel = props.accessibilityLabel,\n      testID = props.testID;\n\n  var pressOut = function pressOut() {\n    if (noPressEffect) {\n      return;\n    }\n\n    if (active) {\n      return setToggleEffect(true);\n    }\n\n    if (onPressOut) {\n      onPressOut();\n    }\n\n    setToggleEffect(false);\n  };\n\n  var pressIn = function pressIn() {\n    if (noPressEffect) {\n      return;\n    }\n\n    if (active) {\n      return setToggleEffect(false);\n    }\n\n    if (onPressIn) {\n      onPressIn();\n    }\n\n    setToggleEffect(true);\n  };\n\n  if (isConvex) {\n    return _jsx(TouchableWithoutFeedback, {\n      onPressOut: pressOut,\n      onPressIn: pressIn,\n      onPress: onPress,\n      onLongPress: onLongPress,\n      accessibilityRole: accessibilityRole,\n      accessibilityStates: accessibilityStates,\n      accessibilityLabel: accessibilityLabel,\n      testID: testID,\n      children: _jsx(View, {\n        children: _jsx(NeuView, _objectSpread(_objectSpread({}, props), {}, {\n          concave: noPressEffect ? false : active ? true : toggleEffect,\n          convex: noPressEffect ? false : active ? false : !toggleEffect,\n          children: children\n        }))\n      })\n    });\n  }\n\n  return _jsx(TouchableWithoutFeedback, {\n    onPressOut: pressOut,\n    onPressIn: pressIn,\n    onPress: onPress,\n    onLongPress: onLongPress,\n    accessibilityRole: accessibilityRole,\n    accessibilityStates: accessibilityStates,\n    accessibilityLabel: accessibilityLabel,\n    testID: testID,\n    children: _jsx(View, {\n      children: _jsx(NeuView, _objectSpread(_objectSpread({}, props), {}, {\n        inset: noPressEffect ? false : active ? active : toggleEffect,\n        children: children\n      }))\n    })\n  });\n};\n\nNeuButton.propTypes = _objectSpread({\n  isConvex: PropTypes.bool,\n  active: PropTypes.bool,\n  color: PropTypes.string.isRequired,\n  width: PropTypes.number.isRequired,\n  height: PropTypes.number.isRequired,\n  noPressEffect: PropTypes.bool,\n  onPress: PropTypes.func,\n  onPressIn: PropTypes.func,\n  onPressOut: PropTypes.func,\n  children: PropTypes.node\n}, NeuView.propTypes);\nexport default NeuButton;","map":{"version":3,"sources":["C:/Users/Jay Patel/Documents/Luminosity Lab/Bank Of The West/pocketpig/node_modules/react-native-neu-element/lib/NeuButton.js"],"names":["React","useState","NeuView","PropTypes","NeuButton","props","toggleEffect","setToggleEffect","children","isConvex","active","noPressEffect","onPressIn","onPressOut","onPress","onLongPress","accessibilityRole","accessibilityStates","accessibilityLabel","testID","pressOut","pressIn","propTypes","bool","color","string","isRequired","width","number","height","func","node"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { TouchableWithoutFeedback, Text, View } from 'react-native';\nimport NeuView from './NeuView';\nimport PropTypes from 'prop-types';\n\nconst NeuButton = props => {\n  const [toggleEffect, setToggleEffect] = useState(false);\n  const {\n    children,\n    isConvex,\n    active,\n    noPressEffect,\n    onPressIn,\n    onPressOut,\n    onPress,\n    onLongPress,\n    accessibilityRole,\n    accessibilityStates,\n    accessibilityLabel,\n    testID\n  } = props;\n\n  const pressOut = () => {\n    if (noPressEffect) {\n      return;\n    }\n    if (active) {\n      return setToggleEffect(true);\n    }\n    if (onPressOut) {\n      onPressOut();\n    }\n    setToggleEffect(false);\n  };\n\n  const pressIn = () => {\n    if (noPressEffect) {\n      return;\n    }\n    if (active) {\n      return setToggleEffect(false);\n    }\n    if (onPressIn) {\n      onPressIn();\n    }\n    setToggleEffect(true);\n  };\n\n  if (isConvex) {\n    return (\n      <TouchableWithoutFeedback\n        onPressOut={pressOut}\n        onPressIn={pressIn}\n        onPress={onPress}\n        onLongPress={onLongPress}\n        accessibilityRole={accessibilityRole}\n        accessibilityStates={accessibilityStates}\n        accessibilityLabel={accessibilityLabel}\n        testID={testID}\n      >\n        <View>\n          <NeuView\n            {...props}\n            concave={noPressEffect ? false : active ? true : toggleEffect}\n            convex={noPressEffect ? false : active ? false : !toggleEffect}\n          >\n            {children}\n          </NeuView>\n        </View>\n      </TouchableWithoutFeedback>\n    );\n  }\n\n  return (\n    <TouchableWithoutFeedback\n      onPressOut={pressOut}\n      onPressIn={pressIn}\n      onPress={onPress}\n      onLongPress={onLongPress}\n      accessibilityRole={accessibilityRole}\n      accessibilityStates={accessibilityStates}\n      accessibilityLabel={accessibilityLabel}\n      testID={testID}\n    >\n      <View>\n        <NeuView\n          {...props}\n          inset={noPressEffect ? false : active ? active : toggleEffect}\n        >\n          {children}\n        </NeuView>\n      </View>\n    </TouchableWithoutFeedback>\n  );\n};\n\nNeuButton.propTypes = {\n  isConvex: PropTypes.bool,\n  active: PropTypes.bool,\n  color: PropTypes.string.isRequired,\n  width: PropTypes.number.isRequired,\n  height: PropTypes.number.isRequired,\n  noPressEffect: PropTypes.bool,\n  onPress: PropTypes.func,\n  onPressIn: PropTypes.func,\n  onPressOut: PropTypes.func,\n  children: PropTypes.node,\n  ...NeuView.propTypes\n};\n\nexport default NeuButton;\n"]},"metadata":{},"sourceType":"module"}